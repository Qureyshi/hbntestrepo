



https://github.com/keysmusician/Hbnb

https://www.freecodecamp.org/news/jwt-authentication-in-flask/

https://flask-jwt-extended.readthedocs.io/en/stable/basic_usage.html



https://www.freecodecamp.org/news/how-to-fetch-data-from-an-api-using-the-fetch-api-in-javascript/

https://www.freecodecamp.org/news/jwt-authentication-in-flask/








git clone https://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@github.com/Qureyshi/holbertonschool-higher_level_programming.git  

git clone https://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@github.com/Qureyshi/holbertonschool-web_front_end.git  


https://www.youtube.com/watch?v=t8kzpvNRL30

 98.91%


https://lucid.app/lucidchart/c47c2a18-c244-49ea-9c50-a235e54a05b7/edit?invitationId=inv_77939efb-a963-4f48-829f-2f59b5cac130

************

https://www.youtube.com/watch?v=9MHYHgh4jYc

https://www.youtube.com/watch?v=p2rQ88l0wvw




curl -X POST -i http://0.0.0.0:8000/places -H "Content-Type: application/json"
 -d '{"name":"sjcc","description":"xx","address":"sjcc","city_id":"dd","latitude":"sjc
c","longitude":"xx","host_id":"sjcc","number_of_rooms":"xx","number_of_bathrooms":"vv"
,"price_per_night":"xx","max_guests":"sjcc","amenity_ids":["hjj","hjj"]}'












*******************************************
data_manager.py



from persistence.ipersistence_manager import IPersistenceManager
from collections import defaultdict
import json


class DataManager(IPersistenceManager):
    """
        {
            "Amenity": {},
            "City": {},
            "Country": {},
            "Place": {},
            "Review": {},
            "User": {}
        }
    """

    def save(self, entity):
        entity_type = type(entity).__name__

        entity_id = getattr(entity, 'id', None)
        if entity_id is None:
            raise ValueError("Entity must have an 'id' attribute")
        #key = f"{entity_type}_{entity_id}"
        #self.dataStore[key] = entity.__dict__

        with open('data.json', 'r') as data:
            dataStore = json.load(data)
            key = f"{entity_type}_{entity_id}"
            dataStore[entity_type][key] = entity.__dict__

        with open('data.json', 'w') as da:
            json.dump(dataStore, da, indent=2)

        return dataStore[entity_type]

    def get(self, entity_id, entity_type):
        with open('data.json', 'r') as data:
            dataStore = json.load(data)
        return dataStore[entity_type][f"{entity_type}_{entity_id}"]


#jsonify

    def update(self, entity, type):
        entity_type = type
        entity_id = entity["id"]
        #if entity_id is None:
        #    raise ValueError("Entity must have an 'id' attribute")
        #if (entity_type, entity_id) in self.storage:
        #    self.storage[(entity_type, entity_id)] = entity
        #else:
        #    raise KeyError(
        #        f"Entity of type {entity_type} with id {entity_id} does not exist"
        #    )
        
        with open('data.json', 'r') as data:
            dataStore = json.load(data)
            key = f"{entity_type}_{entity_id}"
            dataStore[entity_type][key] = entity

        with open('data.json', 'w') as da:
            json.dump(dataStore, da, indent=2)
        
        #return dataStore[entity_type]
        return entity_type

        self.dataStore[entityType][entityID] = entity

    def delete(self, entity_id, entity_type):
        with open('data.json', 'r') as data:
            dataStore = json.load(data)
            key = f"{entity_type}_{entity_id}"
            del dataStore[entity_type][key]

        with open('data.json', 'w') as da:
            json.dump(dataStore, da, indent=2)

        return dataStore[entity_type]
"""
    def save(self, entity):
        entity_type = type(entity).__name__
        entity_id = getattr(entity, 'id', None)
        if entity_id is None:
            raise ValueError("Entity must have an 'id' attribute")
        #key = f"{entity_type}_{entity_id}"
        #self.dataStore[key] = entity.__dict__

        with open('data.json', 'r+') as data:
            dataStore = json.load(data)
            key = f"{entity_type}_{entity_id}"
            dataStore[entity_type].append(entity.__dict__)

        with open('data.json', 'w') as da:
            json.dump(dataStore, da, indent=2)

        return dataStore[entity_type]
"""
------------------------------------------------------

app.py






from flask import Flask
from persistence.ipersistence_manager import IPersistenceManager
from persistence.data_manager import DataManager
from models.user import User
from models.city import City
from models.amenity import Amenity
from models.place import Place
from models.review import Review
import json

app = Flask(__name__)


@app.route("/")
def index():
    return "home"

##########################################

@app.route("/users" , methods=['POST'])
def user():
    usr = User("examplemail@.com", 447, 'name', 'lastname')
    dmanager = DataManager()
    return dmanager.save(usr)


@app.route("/users", methods=['GET'])
def user1():
    with open('data.json', 'r') as data:
        dataStore = json.load(data)
    return dataStore["User"]
 
@app.route("/users/<user_id>", methods=['GET'])
def user2(user_id):
    dmanager = DataManager()
    return dmanager.get(user_id, "User")

@app.route("/users/<user_id>", methods=['PUT'])
def user3(user_id):
    dmanager = DataManager()
    with open('data.json', 'r') as data:
        dataStore = json.load(data)
        ent = dataStore["User"][f"User_{user_id}"]
        ent["email"] = "newmail"
    return dmanager.update(ent, "User")


@app.route("/users/<user_id>", methods=['DELETE'])
def user4(user_id):
    dmanager = DataManager()
    return dmanager.delete(user_id, "User")


#############################################
@app.route("/countries", methods=['GET'])
def countries():
    with open('country_code.json', 'r') as data:
        dataStore = json.load(data)
    return dataStore

"""
@app.route("/countries/<country_code>", methods=['GET'])
def countries_code(country_code):
    with open('country_code.json', 'r') as data:
        dataStore = json.load(data)
        country_code_to_search = country_code
        country = {key: value for key, value in dataStore.items() if value["alpha-2"] == country_code_to_search}
    return country
"""    








###########################################
@app.route("/countries/<country_code>/cities" , methods=['GET'])
def city_(country_code):
    with open('data.json', 'r') as data:
        dataStore = json.load(data)
    city_with_code = country_code
    cities= {key: value for key, value in dataStore["City"].items() if value["country_code"] == city_with_code}
    return cities




@app.route("/cities" , methods=['POST'])
def city():
    city = City("Paris", "FR")
    dmanager = DataManager()
    return dmanager.save(city)


@app.route("/cities", methods=['GET'])
def city1():
    with open('data.json', 'r') as data:
        dataStore = json.load(data)
    return dataStore["City"]

@app.route("/cities/<cities_id>", methods=['GET'])
def city2(cities_id):
    y = DataManager()
    return y.get(cities_id, "City")

@app.route("/cities/<cities_id>", methods=['PUT'])
def city3(user_id):
    return user_id

@app.route("/cities/<cities_id>", methods=['DELETE'])
def city4(cities_id):
    z = DataManager()
    return z.delete(cities_id, "City")

###########################################

@app.route("/amenities" , methods=['POST'])
def amenities():
    amenity = Amenity("Kitchen")
    dmanager = DataManager()
    return dmanager.save(amenity)

@app.route("/amenities", methods=['GET'])
def amenities1():
    with open('data.json', 'r') as data:
        dataStore = json.load(data)
    return dataStore["Amenity"]

@app.route("/amenities/<amenity_id>", methods=['GET'])
def amenities2(amenity_id):
    dmanager = DataManager()
    return dmanager.get(amenity_id, "Amenity")

@app.route("/amenities/<amenity_id>", methods=['PUT'])
def amenities3(amenity_id):
    return amenity_id

@app.route("/amenities/<amenity_id>", methods=['DELETE'])
def amenities4(amenity_id):
    dmanager = DataManager()
    return dmanager.delete(amenity_id, "Amenity")

##########################################3


@app.route("/places" , methods=['POST'])
def places():
    x = Place("name", "desc", "adress", "7eb23aad-16e5-4c8f-bd2c-f75331bf3862", 45, 45,  15,  15, 5, 20, 5, ["286babdf-546c-47b9-9459-60539a40c703", "286babdf-546c-47b9-9459-60539a40c703"])
    y = DataManager()
    return y.save(x)

@app.route("/places", methods=['GET'])
def places1():
    with open('data.json', 'r') as data:
        dataStore = json.load(data)
    return dataStore["Place"]

@app.route("/places/<place_id>", methods=['GET'])
def places2(place_id):
    y = DataManager()
    return y.get(place_id, "Place")

@app.route("/places/<place_id>", methods=['PUT'])
def places3(place_id):
    return place_id

@app.route("/places/<place_id>", methods=['DELETE'])
def places4(place_id):
    z = DataManager()
    return z.delete(place_id, "Place")

##########################################


@app.route("/places/<place_id>/reviews" , methods=['POST'])
def review(place_id):
    rev = Review(place_id, "f9170202-16b0-41db-9ce0-d0d6194ed16f", "rating", "comment")
    dmanager = DataManager()
    return dmanager.save(rev)

@app.route("/users/<user_id>/reviews", methods=['GET'])
def review1(user_id):
    with open('data.json', 'r') as data:
        dataStore = json.load(data)
    user_id_to_search = user_id
    reviews_for_user = {key: value for key, value in dataStore["Review"].items() if value["user_id"] == user_id_to_search}
    return json.dumps(reviews_for_user, indent=2)




@app.route("/places/<place_id>/reviews", methods=['GET'])
def review2(place_id):
    with open('data.json', 'r') as data:
        dataStore = json.load(data)
    place_id_to_search = place_id
    reviews_for_place = {key: value for key, value in dataStore["Review"].items() if value["place_id"] == place_id_to_search}
    return json.dumps(reviews_for_place, indent=2)


@app.route("/reviews/<review_id>", methods=['GET'])
def review3(review_id):
    dmanager = DataManager()
    return dmanager.get(review_id, "Review")


@app.route("/reviews/<review_id>", methods=['PUT'])
def review4(review_id):
    return review_id

@app.route("/reviews/<review_id>", methods=['DELETE'])
def review5(review_id):
    z = DataManager()
    return z.delete(review_id, "Review")





















################################

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000, debug=True)






























